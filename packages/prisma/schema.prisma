datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model users {
    id         String   @id @default(uuid())
    name       String
    surname    String
    email      String   @unique
    password   String
    created_at DateTime @default(now())

    transactions  transactions[]
    subscriptions subscriptions[]
    categories    categories[]
    login         users_login[]
    bank_accounts bank_accounts[]
    imports       imports[]

    @@index([surname])
    @@index([created_at])
}

model users_login {
    id         String   @id @default(uuid())
    device     String
    browser    String
    ip         String
    location   String
    created_at DateTime @default(now())

    user    users  @relation(fields: [user_id], references: [id])
    user_id String

    @@index([user_id])
    @@index([created_at])
}

model imports {
    id              String            @id @default(uuid())
    user_id         String
    title           String
    bank_account_id String
    status          TransactionStatus @default(IMPORT_PENDING)
    created_at      DateTime          @default(now())

    user         users          @relation(fields: [user_id], references: [id])
    bank_account bank_accounts  @relation(fields: [bank_account_id], references: [id])
    transactions transactions[]
    files        import_files[]

    @@index([user_id])
    @@index([status])
}

model import_files {
    id         String   @id @default(uuid())
    import_id  String
    filename   String
    filetype   FileType
    path       String
    created_at DateTime @default(now())

    imports imports @relation(fields: [import_id], references: [id])

    @@index([import_id])
}

model transactions {
    id             String            @id @default(uuid())
    user_id        String
    title          String
    date           DateTime
    icon           String?
    type           TransactionType   @default(EXPENSES)
    category_id    String?
    subcategory_id String?
    import_id      String?
    note           String?
    status         TransactionStatus @default(APPROVED)
    ignore         Boolean           @default(false)
    created_at     DateTime          @default(now())

    user        users          @relation(fields: [user_id], references: [id])
    category    categories?    @relation(fields: [category_id], references: [id])
    subcategory subcategories? @relation(fields: [subcategory_id], references: [id])

    media   transactions_media[]
    amounts amounts[]
    imports imports?             @relation(fields: [import_id], references: [id])

    @@index([user_id])
    @@index([category_id])
    @@index([subcategory_id])
    @@index([date])
    @@index([user_id, date])
}

model subscriptions {
    id                   String         @id @default(uuid())
    user_id              String
    title                String
    description          String?
    amount               Float
    currency             Currency
    appearance_mode      AppearanceMode
    appearance_logo_icon String
    first_payment        DateTime
    cycle_number         String
    cycle_period         String
    remember_period      RememberPeriod
    bank_account_id      String
    is_enabled           Boolean
    created_at           DateTime       @default(now())

    user         users         @relation(fields: [user_id], references: [id])
    bank_account bank_accounts @relation(fields: [bank_account_id], references: [id])

    @@index([user_id])
    @@index([bank_account_id])
    @@index([is_enabled])
}

model transactions_media {
    id             String   @id @default(uuid())
    transaction_id String
    filename       String
    filetype       String
    path           String
    created_at     DateTime @default(now())

    transaction transactions @relation(fields: [transaction_id], references: [id])

    @@index([transaction_id])
}

model bank_accounts {
    id          String          @id @default(uuid())
    user_id     String
    title       String
    description String
    type        BankAccountType @default(BANK_ACCOUNT)
    logo_icon   String?
    created_at  DateTime        @default(now())

    subscriptions subscriptions[]
    amounts       amounts[]
    user          users           @relation(fields: [user_id], references: [id])
    imports       imports[]

    @@index([user_id])
}

model categories {
    id          String          @id @default(uuid())
    user_id     String
    title       String
    description String?
    for         TransactionType
    logo_icon   String
    created_at  DateTime        @default(now())

    transactions  transactions[]
    subcategories subcategories[]

    user users @relation(fields: [user_id], references: [id])

    @@index([user_id])
    @@index([for])
}

model subcategories {
    id          String   @id @default(uuid())
    category_id String
    title       String
    description String?
    logo_icon   String
    created_at  DateTime @default(now())

    transactions transactions[]

    category categories @relation(fields: [category_id], references: [id])

    @@index([category_id])
}

model amounts {
    id              String          @id @default(uuid())
    transaction_id  String
    amount          Float
    currency        Currency
    action          TransactionType @default(EXPENSES)
    bank_account_id String
    created_at      DateTime        @default(now())

    bank_account bank_accounts @relation(fields: [bank_account_id], references: [id])
    transaction  transactions  @relation(fields: [transaction_id], references: [id])

    @@index([transaction_id])
    @@index([bank_account_id])
    @@index([action])
}

enum TransactionType {
    INTERNAL
    EXPENSES
    INCOME
}

enum TransactionStatus {
    APPROVED
    REJECTED
    IMPORT_PENDING
    IMPORT_REJECTED
    IMPORT_APPROVED
}

enum BankAccountType {
    ONLINE_BANK
    BANK_ACCOUNT
    CIRCUIT
    DEPOSIT_BANK
    BROKER
}

enum Currency {
    USD
    EUR
    GBP
    JPY
    CNY
    INR
    AUD
    CAD
    CHF
    SEK
    NZD
    MXN
    SGD
    HKD
    NOK
    KRW
    TRY
    UNKNOWN
}

enum RememberPeriod {
    SAME_DAY
    THREE_DAYS
    SEVEN_DAYS
    FOURTEEN_DAYS
    THIRTY_DAYS
    NINETY_DAYS
}

enum AppearanceMode {
    LOGO
    ICON
}

enum FileType {
    CSV
    PDF
}
