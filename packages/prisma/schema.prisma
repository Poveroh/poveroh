datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id        String   @id @default(uuid())
    name      String
    surname   String
    email     String   @unique
    password  String
    createdAt DateTime @default(now())

    transactions  Transaction[]
    subscriptions Subscription[]
    categories    Category[]
    logins        UserLogin[]
    accounts      Account[]
    imports       Import[]

    @@index([surname])
    @@index([createdAt])
}

model UserLogin {
    id        String   @id @default(uuid())
    device    String
    browser   String
    ip        String
    location  String
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([userId])
    @@index([createdAt])
}

model Import {
    id        String            @id @default(uuid())
    userId    String
    title     String
    accountId String
    status    TransactionStatus @default(IMPORT_PENDING)
    createdAt DateTime          @default(now())

    user         User          @relation(fields: [userId], references: [id])
    account      Account       @relation(fields: [accountId], references: [id])
    transactions Transaction[]
    files        ImportFile[]

    @@index([userId])
    @@index([status])
}

model ImportFile {
    id        String   @id @default(uuid())
    importId  String
    filename  String
    filetype  FileType
    path      String
    createdAt DateTime @default(now())

    import Import @relation(fields: [importId], references: [id])

    @@index([importId])
}

model Transaction {
    id            String            @id @default(uuid())
    userId        String
    title         String
    date          DateTime
    icon          String?
    action        TransactionAction @default(EXPENSES)
    categoryId    String?
    subcategoryId String?
    importId      String?
    note          String?
    status        TransactionStatus @default(APPROVED)
    ignore        Boolean           @default(false)
    createdAt     DateTime          @default(now())

    user        User         @relation(fields: [userId], references: [id])
    category    Category?    @relation(fields: [categoryId], references: [id])
    subcategory Subcategory? @relation(fields: [subcategoryId], references: [id])

    media   TransactionMedia[]
    amounts Amount[]
    import  Import?            @relation(fields: [importId], references: [id])

    @@index([userId])
    @@index([categoryId])
    @@index([subcategoryId])
    @@index([date])
    @@index([userId, date])
}

model Subscription {
    id                 String         @id @default(uuid())
    userId             String
    title              String
    description        String?
    amount             Float
    currency           Currency
    appearanceMode     AppearanceMode
    appearanceLogoIcon String
    firstPayment       DateTime
    cycleNumber        String
    cyclePeriod        String
    rememberPeriod     RememberPeriod
    accountId          String
    isEnabled          Boolean
    createdAt          DateTime       @default(now())

    user    User    @relation(fields: [userId], references: [id])
    account Account @relation(fields: [accountId], references: [id])

    @@index([userId])
    @@index([accountId])
    @@index([isEnabled])
}

model TransactionMedia {
    id            String   @id @default(uuid())
    transactionId String
    filename      String
    filetype      String
    path          String
    createdAt     DateTime @default(now())

    transaction Transaction @relation(fields: [transactionId], references: [id])

    @@index([transactionId])
}

model Account {
    id          String      @id @default(uuid())
    userId      String
    title       String
    description String
    type        AccountType @default(BANK_ACCOUNT)
    logoIcon    String?
    createdAt   DateTime    @default(now())

    subscriptions Subscription[]
    amounts       Amount[]
    user          User           @relation(fields: [userId], references: [id])
    imports       Import[]

    @@index([userId])
}

model Category {
    id          String            @id @default(uuid())
    userId      String
    title       String
    description String?
    for         TransactionAction
    logoIcon    String
    createdAt   DateTime          @default(now())

    transactions  Transaction[]
    subcategories Subcategory[]

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([for])
}

model Subcategory {
    id          String   @id @default(uuid())
    categoryId  String
    title       String
    description String?
    logoIcon    String
    createdAt   DateTime @default(now())

    transactions Transaction[]

    category Category @relation(fields: [categoryId], references: [id])

    @@index([categoryId])
}

model Amount {
    id            String            @id @default(uuid())
    transactionId String
    amount        Float
    currency      Currency
    action        TransactionAction @default(EXPENSES)
    accountId     String
    createdAt     DateTime          @default(now())

    account     Account     @relation(fields: [accountId], references: [id])
    transaction Transaction @relation(fields: [transactionId], references: [id])

    @@index([transactionId])
    @@index([accountId])
    @@index([action])
}

enum TransactionAction {
    TRANSFER
    EXPENSES
    INCOME
}

enum TransactionStatus {
    APPROVED
    REJECTED
    IMPORT_PENDING
    IMPORT_REJECTED
    IMPORT_APPROVED
}

enum AccountType {
    ONLINE_BANK
    BANK_ACCOUNT
    CIRCUIT
    DEPOSIT_BANK
    BROKER
}

enum Currency {
    USD
    EUR
    GBP
    JPY
    CNY
    INR
    AUD
    CAD
    CHF
    SEK
    NZD
    MXN
    SGD
    HKD
    NOK
    KRW
    TRY
    UNKNOWN
}

enum RememberPeriod {
    SAME_DAY
    THREE_DAYS
    SEVEN_DAYS
    FOURTEEN_DAYS
    THIRTY_DAYS
    NINETY_DAYS
}

enum AppearanceMode {
    LOGO
    ICON
}

enum FileType {
    CSV
    PDF
}
